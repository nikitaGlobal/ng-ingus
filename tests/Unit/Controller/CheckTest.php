<?php
declare(strict_types=1);
namespace Ng\Ingus\Tests\Controller;

use Ng\Ingus\Controller\Check;
use PHPUnit\Framework\TestCase;

define(
	'NGING_REGEX_RULES',
	json_decode(
		file_get_contents( dirname( __DIR__, 3 ) . '/rules/rules.json' ),
		true
	)
);

class CheckTest extends TestCase {

	use Check;

	public function test_rules() {
		$this->assertIsArray( NGING_REGEX_RULES );
		$this->assertNotEmpty( NGING_REGEX_RULES );
	}

	public function test_all() {
		$methods     = get_class_methods( 'Ng\Ingus\Controller\Check' );
		$methods     = array_filter(
			$methods,
			function ( $method ) {
				return 0 === strpos( $method, 'check_' );
			}
		);
		$texts_false = array(
			'–ü—Ä–æ–¥–∞–º —Å—Ç—É–ª—å—á–∏–∫ –¥–µ—Ç—Å–∫–∏–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä -30 –ª–µ–≤ , —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –≥.–û–±–∑–æ—Ä',
			'–°–æ—Å–µ–¥–∏, –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è. –ë–æ—Ç –µ—â–µ —Ç–æ–ª—å–∫–æ –æ–±—É—á–∞–µ—Ç—Å—è, —É –Ω–µ–≥–æ –±—ã–≤–∞—é—Ç –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è. 
–ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —ç–º–æ–¥–∑–∏ > 15%, —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ —Å–ø–∞–º–º–∞.
–¢–∞–∫–∂–µ –æ–Ω –æ—à–∏–±–æ—á–Ω–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞–∫ —Å–ø–∞–º–º, —ç—Ç–æ —è —É–±—Ä–∞–ª. 
–Ø –≤—Å–µ–º –≤ –ª–∏—á–∫—É –Ω–∞–ø–∏—Å–∞–ª –∏ –≤—Å–µ —Ä–µ—à–∏–ª–∏, –µ—Å–ª–∏ –∫–æ–≥–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è –ø–æ–ø—Ä–∞–≤–ª—é.
–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!',
			'–ü—Ä–æ–¥–∞–µ—Ç—Å—è –ª–∞–º–∏–Ω–∞—Ç, –ø—Ä–∏–º–µ—Ä–Ω–æ 70 –∫–≤.–º.  –ë/–£, –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –ª–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω. –î–æ—Å–∫–∏  122*20, —á–∞—Å—Ç—å –ø–æ–¥—Ä–µ–∑–∞–Ω—ã –ø–æ–¥ –∫–æ–º–Ω–∞—Ç—ã.
50 –ª–µ–≤',
			'–ü—Ä–æ–¥–∞—ë—Ç—Å—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –ê–∫–≤–∞—Ö–∞—É—Å –Ω–∞ 8 –ø–æ—Å–µ—â–µ–Ω–∏–π (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ 10, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 2). –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 29.03.2025. –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ—Å–µ—â–µ–Ω–∏–π ‚Äî 300 –ª–µ–≤, –Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Å–∫–∏–¥–∫–∞ 10%, –ø–æ—ç—Ç–æ–º—É —Ü–µ–Ω–∞ ‚Äî 270 –ª–µ–≤.
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SPA –Ω–∞ —Å–∞–π—Ç–µ: https://ensanahotels.com/bg/hotels/aquahouse/spa',
			'–ê –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É –ª–µ–≥–∫–æ. –ú–Ω–µ –∏ –ï–Ω–µ—Ä–≥–æ-–ü—Ä–æ, –∏ –í–∏–ö –ø—Ä–∏—Å—ã–ª–∞—é—Ç, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–æ–¥–µ –Ω–µ –¥–µ–ª–∞–ª, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞–ª email –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –Ω–∏–º–∏.
–í–∏–≤–∞–∫–æ–º —Ç–æ–∂–µ. –í–æ–æ–±—â–µ –±—É–º–∞–∂–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∞–ª –∑–∞ 8.5 –ª–µ—Ç, —Ç.–µ. —É –Ω–∏—Ö —ç—Ç–æ —É–∂–µ –¥–æ–≤–æ–ª—å–Ω–æ –¥–∞–≤–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ.

–ù—É –∏ epay.bg —Ç–æ–∂–µ —É–º–µ–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –Ω–∞ –ø–æ—á—Ç—É.',
			'',
		);
		$texts_true  = array(
			'–í –ø–æ–∏—Å–∫–∞—Ö –æ—Ö—Ä–∞–Ω—ã-–æ—Ç 8000 —Ä—É–±. –≤ –¥–µ–Ω—å.
–¢–∞–∫–∂–µ –Ω—É–∂–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å —Å –ª–∏—á–Ω—ã–º/–∞—Ä–µ–Ω–¥–Ω—ã–º –∞–≤—Ç–æ –∏ –±–µ–∑. 
 –û–ø–ª–∞—Ç–∞ –æ—Ç 25 500 —Ä—É–±. –∑–∞ –æ–¥–∏–Ω —Ä–µ–π—Å!  –†–∞—Å—Ö–æ–¥—ã –≤ –¥–æ—Ä–æ–≥–µ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º.',
		);
		foreach ( $texts_true as $text ) {
			$results = array();
			foreach ( $methods as $method ) {
				$results[ $method ] = $this->$method( $text );
			}
			print_r( $results );
			$this->assertTrue( in_array( true, $results ), 'should be spam. Tried ' . $text );
		}
		foreach ( $methods as $method ) {
			foreach ( $texts_false as $text ) {
				$this->assertFalse( $this->$method( $text ), 'Should be fine. Tried ' . $text );

			}
		}
	}
	public function test_emoji_true() {
		$text = 'üòäüòäasdfdsafdsaüòäüòäüòäüòäüòä';
		$this->assertTrue( $this->check_emoji( $text ) );
	}

	public function test_emoji_false() {
		$text = 'üòäüòäüòä üòä –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 15% —ç–º–æ–¥–∑–∏';
		$this->assertFalse( $this->check_emoji( $text ) );
	}

	public function test_mixed_letters_true() {
		$text = '–ù–∞–±–∏—Ä–∞–µ–º –øa—Ä—Ç–Ω—ë—Ä–æ–≤, –Ωe–ø–ª–æ—Ö–æ–π –∑–∞—Äa–±–æ—Ç–æ–∫ –≤ –Ωe–¥–µ–ª—é,–±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ø–∏—Åa—Ç—å –≤ –ª–∏—á–Ω—ãe —Å–æo–±—â–µ–Ω–∏—è';
		$this->assertTrue( $this->check_mixed_letters( $text ) );
	}

	public function test_mixed_letters_true_false() {
		$texts_false = array(
			'–ù–∞–±–∏—Ä–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –Ω–µ–ø–ª–æ—Ö–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –Ω–µ–¥–µ–ª—é,–±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
		);
		$texts_true  = array(
			'üá∑üá∫–¢–†–ï–ë–£–Æ–¢–°–Ø –ü–ê–†–¢–ù–ï–†–´ –º—É–∂—áu–Ω—ã/–∂–µ–Ω—âu–Ω—ã
–í –û–ù–õ–ê–ô–ù –ü–†–û–ï–ö–¢üá∑üá∫

‚úîÔ∏è –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ä–µ–∂–∏–º–µ
‚úîÔ∏è –º–æ–∂–Ω–æ —Å–æ–≤–º–µ—â–∞—Ç—å
‚úîÔ∏è –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 22 –ª–µ—Ç
‚úîÔ∏è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã

üí∞–ø—Ä–µ–¥–ªŒ±–≥Œ±–µ·¥ç:
‚úîÔ∏è 40 000 —Ä.—É.–±. –≤ –Ωe–¥e–ª—é.
‚úîÔ∏è –≥—ÄŒ±—Ñ–∏·¥ã 3-4 —áŒ±—Å–∞ –≤ –¥e–Ω—å.
‚úîÔ∏è –±e–∑ œÉ–ø—ã—ÇŒ± 


‚àè–∏—à–∏, –≤·¥Ñ—ë —ÄŒ±·¥Ñ—Å–∫–∞–∂e–º ‚û°Ô∏è@kostin1013',
		);
		foreach ( $texts_true as $text ) {
			$this->assertTrue( $this->check_mixed_letters( $text ), 'tried ' . $text );
		}
		foreach ( $texts_false as $text ) {
			$this->assertFalse( $this->check_mixed_letters( $text ), 'tried ' . $text );
		}
	}

	public function test_regex_true() {
		$texts = array(

			'–ù—É–∂–Ω—ã –ª—é–¥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
–°—Ñ–µ—Ä–∞ –Ω–µ —Å–ª–æ–∂–Ω–∞—è, –Ω–æ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è
–î–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç 120-180$ –±–µ–ª—ã–π –≤–∏–¥ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ 
–í –¥–µ–Ω—å –¥–æ –¥–≤—É—Ö —á–∞—Å–æ–≤( –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ)  
–£–î–ê–õ–ï–ù–ö–ê!

–ü–∏—à–∏—Ç–µ "+" –≤ –ª—Å',
			'–£–¥–∞–ª–µ–Ω–∫–∞',
			'–ü–∏—à–∏—Ç–µ + –≤ –ª—Å',
		);
		foreach ( $texts as $text ) {
			$error = 'got: ' . $text . "\n normalized: " . $this->normalize( $text ) . "\n";
			$this->assertTrue( $this->check_regex( $text ), $error );

		}
	}

	/*
		public function test_normalize(){
		$text = '–ù–∞–±–∏—Ä–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –Ω–µ–ø–ª–æ—Ö–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –Ω–µ–¥–µ–ª—é,–±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
		$normalized = $this->normalize($text);
		$this->assertEquals('–Ω–∞–±–∏—Ä–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –Ω–µ–ø–ª–æ—Ö–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –Ω–µ–¥–µ–ª—é –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', $normalized);
		$text = '–ü–∏—à–∏—Ç–µ "+" –≤ –ª—Å';
		$normalized = $this->normalize($text);
		echo $text;
		$this->assertEquals('–ø–∏—à–∏—Ç–µ + –≤ –ª—Å', $normalized);
	}*/
}
