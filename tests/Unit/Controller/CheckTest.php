<?php
declare(strict_types=1);
namespace Ng\Ingus\Tests\Controller;

use Ng\Ingus\Controller\Check;
use PHPUnit\Framework\TestCase;

define(
	'NGING_REGEX_RULES',
	json_decode(
		file_get_contents( dirname( __DIR__, 3 ) . '/rules/rules.json' ),
		true
	)
);

class CheckTest extends TestCase {

	use Check;

	public function test_rules() {
		$this->assertIsArray( NGING_REGEX_RULES );
		$this->assertNotEmpty( NGING_REGEX_RULES );
	}
	public function test_emoji_true() {
		$text = 'üòäüòäasdfdsafdsaüòäüòäüòäüòäüòä';
		$this->assertTrue( $this->check_emoji( $text ) );
	}

	public function test_emoji_false() {
		$text = 'üòäüòäüòä üòä –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 15% —ç–º–æ–¥–∑–∏';
		$this->assertFalse( $this->check_emoji( $text ) );
	}

	public function test_mixed_letters_true() {
		$text = '–ù–∞–±–∏—Ä–∞–µ–º –øa—Ä—Ç–Ω—ë—Ä–æ–≤, –Ωe–ø–ª–æ—Ö–æ–π –∑–∞—Äa–±–æ—Ç–æ–∫ –≤ –Ωe–¥–µ–ª—é,–±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ø–∏—Åa—Ç—å –≤ –ª–∏—á–Ω—ãe —Å–æo–±—â–µ–Ω–∏—è';
		$this->assertTrue( $this->check_mixed_letters( $text ) );
	}

	public function test_mixed_letters_true_false() {
		$texts_false = array(
			'–ù–∞–±–∏—Ä–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –Ω–µ–ø–ª–æ—Ö–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –Ω–µ–¥–µ–ª—é,–±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
		);
		$texts_true  = array(
			'üá∑üá∫–¢–†–ï–ë–£–Æ–¢–°–Ø –ü–ê–†–¢–ù–ï–†–´ –º—É–∂—áu–Ω—ã/–∂–µ–Ω—âu–Ω—ã
–í –û–ù–õ–ê–ô–ù –ü–†–û–ï–ö–¢üá∑üá∫

‚úîÔ∏è –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ä–µ–∂–∏–º–µ
‚úîÔ∏è –º–æ–∂–Ω–æ —Å–æ–≤–º–µ—â–∞—Ç—å
‚úîÔ∏è –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 22 –ª–µ—Ç
‚úîÔ∏è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã

üí∞–ø—Ä–µ–¥–ªŒ±–≥Œ±–µ·¥ç:
‚úîÔ∏è 40 000 —Ä.—É.–±. –≤ –Ωe–¥e–ª—é.
‚úîÔ∏è –≥—ÄŒ±—Ñ–∏·¥ã 3-4 —áŒ±—Å–∞ –≤ –¥e–Ω—å.
‚úîÔ∏è –±e–∑ œÉ–ø—ã—ÇŒ± 


‚àè–∏—à–∏, –≤·¥Ñ—ë —ÄŒ±·¥Ñ—Å–∫–∞–∂e–º ‚û°Ô∏è@kostin1013',
		);
		foreach ( $texts_true as $text ) {
			$this->assertTrue( $this->check_mixed_letters( $text ), 'tried ' . $text );
		}
		foreach ( $texts_false as $text ) {
			$this->assertFalse( $this->check_mixed_letters( $text ), 'tried ' . $text );
		}
	}

	public function test_regex_true() {
		$texts = array(

			'–ù—É–∂–Ω—ã –ª—é–¥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
–°—Ñ–µ—Ä–∞ –Ω–µ —Å–ª–æ–∂–Ω–∞—è, –Ω–æ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è
–î–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç 120-180$ –±–µ–ª—ã–π –≤–∏–¥ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ 
–í –¥–µ–Ω—å –¥–æ –¥–≤—É—Ö —á–∞—Å–æ–≤( –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ)  
–£–î–ê–õ–ï–ù–ö–ê!

–ü–∏—à–∏—Ç–µ "+" –≤ –ª—Å',
			'–£–¥–∞–ª–µ–Ω–∫–∞',
			'–ü–∏—à–∏—Ç–µ + –≤ –ª—Å',
		);
		foreach ( $texts as $text ) {
			$error = 'got: ' . $text . "\n normalized: " . $this->normalize( $text ) . "\n";
			$this->assertTrue( $this->check_regex( $text ), $error );

		}
	}

	/*
		public function test_normalize(){
		$text = '–ù–∞–±–∏—Ä–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –Ω–µ–ø–ª–æ—Ö–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –Ω–µ–¥–µ–ª—é,–±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
		$normalized = $this->normalize($text);
		$this->assertEquals('–Ω–∞–±–∏—Ä–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –Ω–µ–ø–ª–æ—Ö–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –Ω–µ–¥–µ–ª—é –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', $normalized);
		$text = '–ü–∏—à–∏—Ç–µ "+" –≤ –ª—Å';
		$normalized = $this->normalize($text);
		echo $text;
		$this->assertEquals('–ø–∏—à–∏—Ç–µ + –≤ –ª—Å', $normalized);
	}*/
}
